{"name":"Rxflux","tagline":"RxFlux is a small framework in order to follow Flux design pattern with RxJava functionalities","body":"## Introduction\r\nRxFlux is small light-weight framework that makes it easy to follow the [Flux pattern](https://facebook.github.io/flux/docs/overview.html) with RxJava functionalities.\r\n\r\nIn order to understand more how to use Flux pattern in Android [@lgvalle](https://github.com/lgvalle) created a nice [example and explanation](https://github.com/lgvalle/android-flux-todo-app). I would recommend to read it before continuing.\r\n\r\n## Usage\r\n\r\nGradle:\r\n```\r\nTODO when the first version is uploaded to maven update here the explanation.\r\n```\r\n\r\nThe main class is the RxFlux, is the responsible to handle activity lifecycle in order to notify and register stores and views. \r\n\r\nFirst thing you must do is in init RxFlux in your Application instance\r\n```java\r\npublic void onCreate() {\r\n    super.onCreate();\r\n    rxFlux = RxFlux.init();\r\n}\r\n``` \r\n\r\nThis will make RxFlux register into the activity lifecycle and init the internal classes.\r\n\r\nFrom now on we will follow the image below to understand each step\r\n![Flux architecture](https://raw.githubusercontent.com/lgvalle/lgvalle.github.io/master/public/images/flux-graph-complete.png)\r\n\r\n### View\r\nEach activity of your app must implements RxStoreDispatch. This interface defines the methods needed for each view (on Android it applies for our Activity). \r\n\r\nRxFlux will notify each activity that implements RxStoreDispatch during the creation of it and will call ```onRxStoresRegister()``` in this method we must call the instance of the needed stores and register them.\r\n\r\nFor example: (see stores section for more)\r\n```java\r\n@Override\r\n  public void onRxStoresRegister() {\r\n    repositoriesStore = RepositoriesStore.get(mDispatcher);\r\n    repositoriesStore.register();\r\n}\r\n```\r\n\r\nRxFlux will register store change for each activity during the ```onResume``` method and then call ```onRxViewRegistered()``` so we can register the activity fragments or custom views. (Todo see how to register)\r\n\r\nThe last method we must implement is ```onRxStoreChanged(RxStoreChange change)``` here we will get notified by any store change that occurs in our app. For that reasons we must filter by storeId to identify which store has change.\r\n\r\n```java\r\n  @Override\r\n  public void onRxStoreChanged(RxStoreChange change) {\r\n    switch (change.getStoreId()) {\r\n      case RepositoriesStore.ID:\r\n        // Identify which type of action was and update view according to that\r\n        break;\r\n    }\r\n  }\r\n```\r\n\r\n### RxActionCreator\r\n\r\n## Authors and Contributors\r\nYou can @mention a GitHub username to generate a link to their profile. The resulting `<a>` element will link to the contributor’s GitHub Profile. For example: In 2007, Chris Wanstrath (@defunkt), PJ Hyett (@pjhyett), and Tom Preston-Werner (@mojombo) founded GitHub.\r\n\r\n## Support or Contact\r\nHaving trouble with Pages? Check out our [documentation](https://help.github.com/pages) or [contact support](https://github.com/contact) and we’ll help you sort it out.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}